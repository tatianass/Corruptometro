}
library(caret)
# Aprendizado de máquina
if(!require(mlbench)){
install.packages("mlbench")
}
library(mlbench)
# Árvore de decisão
if(!require(C50)){
install.packages("C50")
}
library(C50)
# Random - Floresta randômica
if(!require(randomForest)){
install.packages("randomForest")
}
library(randomForest)
# ----------- Bibliotecas  FIM
# Função para modificar o ano.
## Gestões entre 2009 e 2012 tem o ano modificado para 2009
## Gestões entre 2013 e 2016 tem o ano modificado para 2013
relabel_ano <- function(x){
ifelse(x >= 2009 && x <2013, 2009, 2013)
}
# Carregar conjunto de dados
## tre_sagres_jul jestores jugados
tre_sagres_jul <- read.csv('../../data/TRE_Sagres_Resp_Eleito.csv', encoding = "UTF-8")
## tre_sagres_n_jul jestores Não jugados
tre_sagres_n_jul <- read.csv('../../data/TRE_Sagres_Eleit_Idon.csv', encoding = "UTF-8")
## dados referentes a unidade gestora
ugestora <- read.csv('../../data/codigo_ugestora.csv', encoding = "UTF-8")
## contratos realizados pelas unidades gestoras
contrato <- read.csv('../../data/contratos.csv', encoding = "UTF-8")
## Conjundo de aditivos solicitados pelas unidades gestoras
aditivos = read.csv("../../data/aditivos.csv", encoding = "UTF-8")
## Sumário eleitoral das unidades gestoras
quantidadeEleitores = read.csv("../../data/quantidadeEleitores.csv", encoding = "UTF-8")
# Adiciona coluna Classe e valor de "Jugados" para gestores julgados
tre_sagres_jul$Classe <- "Julgado"
# Adiciona coluna Classe e valor de "Não julgados" para gestores Não julgados
tre_sagres_n_jul$Classe <- "Não julgado"
# Revolve colunas não necessárias
tre_sagres_jul <- select(tre_sagres_jul, -DECISÃO, -RES..DECISÃO.PODER.LEGISLATIVO, -ITEM, -PROCESSO, -SUBCATEGORIA, -RESPONSÁVEL, -CPF)
# Junta conjunto de dados dos gestores julgados e dos Não julgados
tre_sagres <- rbind(tre_sagres_jul, tre_sagres_n_jul)
# seleciona conjunto de contrados realizados após o ano de 2008 com licitações do tipo "Dispensa de valor" ou "Dispensa por outro motivo"
licitacoes <- subset(contrato, tp_Licitacao %in% c(6, 7) & dt_Ano > 2008)
# Aplica a função "relabel_ano" as licitações selecionadas
licitacoes$dt_Ano <- with(licitacoes, unlist(lapply(dt_Ano, relabel_ano)))
# Agrupa as dispensas de cada gestao agrupadas pelo ano
nu_Dispensas <- aggregate(tp_Licitacao ~ cd_UGestora + dt_Ano, licitacoes, length)
# Modifica o nome da coluna "tp_Licitacao" no conjunto "nu_Dispensas" para "nu_Dispensas"
colnames(nu_Dispensas)[3] <- "nu_Dispensas"
# Merge dos conjuntos "tre_sagres" e "nu_Dispensas". Merge feito pelo ano e unidade gestora
tre_sagres <- merge(tre_sagres, nu_Dispensas, all.x = T, by.x=c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"))
# Atribui 0 para "N/A"
tre_sagres$nu_Dispensas <- with(tre_sagres, ifelse(is.na(nu_Dispensas),0,nu_Dispensas))
# Aplica a função "relabel_ano" ao conjunto "Aditivos"
aditivos$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
# Agrupa os aditivos de cada gestao pelo ano
aditivos <- aggregate(nu_Aditivo ~ cd_UGestora + dt_Ano, aditivos, length)
# Convite de Licitações
## Seleciona todos os contratos do tipo convite
conviteLicitacaoPorGestao <- filter(contrato, tp_Licitacao == 3)
# Aplica a função "relabel_ano" ao conjunto de licitações do tipo "Convite"
conviteLicitacaoPorGestao$dt_Ano <- with(conviteLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
# Agrupa os convites de licitações de cada gestao pelo ano
conviteLicitacaoPorGestao <- aggregate(nu_Contrato ~ cd_UGestora + dt_Ano, conviteLicitacaoPorGestao, length)
# Merge dos conjuntos "aditivos" e "conviteLicitacaoPorGestao". Merge feito pelo ano e unidade gestora
set_features <- merge(aditivos, conviteLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
# Quantidade de Eleitores por Municipio e Distancia da capital
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade2009, Quantidade2013, DistanciaParaCapital)
# Média de Eleitores entre os anos
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(Media = (Quantidade2009 + Quantidade2013)/2)
# Merge dos conjuntos "tre_sagres" e "set_features". Merge feito pelo ano e unidade gestora
tre_sagres <- merge(tre_sagres, set_features, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
# Merge dos conjuntos "tre_sagres" e "quantidadeEleitores". Merge feito pelo ano e unidade gestora
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangencia"), all.x = T)
# Adiciona 0 nos "N/A"
tre_sagres[is.na(tre_sagres)] <- 0
# Elimina os repitidos
tre_sagres <- unique(tre_sagres)
# Salva o conjunto "tre_sagres" com o nome "tre_sagres_unificado.csv"
write.table(tre_sagres, "../../data/tre_sagres_unificado.csv", quote = F, row.names = F, sep=",", fileEncoding = "UTF-8")
data = read.csv("../../data/tre_sagres_unificado.csv",header=T, encoding = "UTF-8")
data = read.csv("../../data/tre_sagres_unificado.csv",header=T, encoding = "UTF-8")
features = select(data, nu_Dispensas,nu_Aditivo,nu_Contrato)
View(features)
View(data)
table(data$class)
table(data$Classe)
train_idx = createDataPartition(y=data$Classe, p=.9,list=FALSE)
# Conjunto de treino
train = data[train_idx,]
# Conjunto de teste
test = data[-train_idx,]
# features do conjunto de treino
train_idx = createDataPartition(y=data$Classe, p=.9, list=FALSE)
# Conjunto de treino
train = data[train_idx,]
# Conjunto de teste
test = data[-train_idx,]
# features do conjunto de treino
features = select(train, nu_Dispensas, nu_Aditivo, nu_Contrato)
prop.table(table(train$Classe))
prop.table(table(test$Classe))
?expand.grid
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="rf")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
#
prob = predict
#
plot(model)
test_labels = as.factor(test$Classe)
#
predictions = predict(model,newdata=test)
#
prob = predict(model,newdata=test,type = "prob")
predict
test_labels = as.factor(test$Classe)
#
predictions = predict(model,newdata=test)
#
prob = predict(model,newdata=test,type = "prob")
prob
confusionMatrix(data = predictions, test_labels)
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
#
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
#
labels = as.factor(train$Classe)
#
model = train(x=features,y=labels,trControl=fitControl)
#
test_labels = as.factor(test$Classe)
#
predictions = predict(model,newdata=test)
#
prob = predict(model,newdata=test,type = "prob")
#
confusionMatrix(data = predictions, test_labels)
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
#
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
#
labels = as.factor(train$Classe)
#
model = train(x=features,y=labels,trControl=fitControl)
#
test_labels = as.factor(test$Classe)
#
predictions = predict(model,newdata=test)
#
prob = predict(model,newdata=test,type = "prob")
#
confusionMatrix(data = predictions, test_labels)
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
train_idx = createDataPartition(y=data$Classe, p=.95, list=FALSE)
# Conjunto de treino
train = data[train_idx,]
# Conjunto de teste
test = data[-train_idx,]
# features do conjunto de treino
features = select(train, nu_Dispensas, nu_Aditivo, nu_Contrato)
# Proporção do conjunto de treino
prop.table(table(train$Classe))
# Proporção do conjunto de test
prop.table(table(test$Classe))
#Treino do modelo
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
train_idx = createDataPartition(y=data$Classe, p=.9, list=FALSE)
# Conjunto de treino
train = data[train_idx,]
# Conjunto de teste
test = data[-train_idx,]
# features do conjunto de treino
features = select(train, nu_Dispensas, nu_Aditivo, nu_Contrato)
# Proporção do conjunto de treino
prop.table(table(train$Classe))
# Proporção do conjunto de test
prop.table(table(test$Classe))
#Treino do modelo
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
train_idx = createDataPartition(y=data$Classe, p=.9, list=FALSE)
# Conjunto de treino
train = data[train_idx,]
# Conjunto de teste
test = data[-train_idx,]
# features do conjunto de treino
features = select(train, nu_Dispensas, nu_Aditivo, nu_Contrato)
# Proporção do conjunto de treino
prop.table(table(train$Classe))
# Proporção do conjunto de test
prop.table(table(test$Classe))
#Treino do modelo
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
train_idx = createDataPartition(y=data$Classe, p=.8, list=FALSE)
# Conjunto de treino
train = data[train_idx,]
# Conjunto de teste
test = data[-train_idx,]
# features do conjunto de treino
features = select(train, nu_Dispensas, nu_Aditivo, nu_Contrato)
# Proporção do conjunto de treino
prop.table(table(train$Classe))
# Proporção do conjunto de test
prop.table(table(test$Classe))
#Treino do modelo
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
train_idx = createDataPartition(y=data$Classe, p=.75, list=FALSE)
# Conjunto de treino
train = data[train_idx,]
# Conjunto de teste
test = data[-train_idx,]
# features do conjunto de treino
features = select(train, nu_Dispensas, nu_Aditivo, nu_Contrato)
# Proporção do conjunto de treino
prop.table(table(train$Classe))
# Proporção do conjunto de test
prop.table(table(test$Classe))
#Treino do modelo
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
# Excutar script data.R
# source("data.R")
# Importar conjunto de dados "tre_sagres_unificado.csv"
data = read.csv("../../data/tre_sagres_unificado.csv",header=T, encoding = "UTF-8")
# Selecionar apenas as features nu_Dispensas, nu_Aditivo, nu_Contrato. Referente ao nu_Dispensass, nu_Aditivo e nu_Contrato
features = select(data, nu_Dispensas, nu_Aditivo, nu_Contrato)
# Apresentar os possíveis níveis de Classe
table(data$Classe)
# Partição de treino com 90% dos dados
train_idx = createDataPartition(y=data$Classe, p=.75, list=FALSE)
# Conjunto de treino
train = data[train_idx,]
# Conjunto de teste
test = data[-train_idx,]
# features do conjunto de treino
features = select(train, nu_Dispensas, nu_Aditivo, nu_Contrato)
# Proporção do conjunto de treino
prop.table(table(train$Classe))
# Proporção do conjunto de test
prop.table(table(test$Classe))
#Treino do modelo
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
# Excutar script data.R
# source("data.R")
# Importar conjunto de dados "tre_sagres_unificado.csv"
data = read.csv("../../data/tre_sagres_unificado.csv",header=T, encoding = "UTF-8")
# Selecionar apenas as features nu_Dispensas, nu_Aditivo, nu_Contrato. Referente ao nu_Dispensass, nu_Aditivo e nu_Contrato
features = select(data, nu_Dispensas, nu_Aditivo, nu_Contrato)
# Apresentar os possíveis níveis de Classe
table(data$Classe)
# Partição de treino com 90% dos dados
train_idx = createDataPartition(y=data$Classe, p=.75, list=FALSE)
# Conjunto de treino
train = data[train_idx,]
# Conjunto de teste
test = data[-train_idx,]
# features do conjunto de treino
features = select(train, nu_Dispensas, nu_Aditivo, nu_Contrato)
# Proporção do conjunto de treino
prop.table(table(train$Classe))
# Proporção do conjunto de test
prop.table(table(test$Classe))
#Treino do modelo
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
# Excutar script data.R
# source("data.R")
# Importar conjunto de dados "tre_sagres_unificado.csv"
data = read.csv("../../data/tre_sagres_unificado.csv",header=T, encoding = "UTF-8")
# Selecionar apenas as features nu_Dispensas, nu_Aditivo, nu_Contrato. Referente ao nu_Dispensass, nu_Aditivo e nu_Contrato
features = select(data, nu_Dispensas, nu_Aditivo, nu_Contrato)
# Apresentar os possíveis níveis de Classe
table(data$Classe)
# Partição de treino com 90% dos dados
train_idx = createDataPartition(y=data$Classe, p=.75, list=FALSE)
# Conjunto de treino
train = data[train_idx,]
# Conjunto de teste
test = data[-train_idx,]
# features do conjunto de treino
features = select(train, nu_Dispensas, nu_Aditivo, nu_Contrato)
# Proporção do conjunto de treino
prop.table(table(train$Classe))
# Proporção do conjunto de test
prop.table(table(test$Classe))
#Treino do modelo
grid = expand.grid(.ntree=c(10,20,30,40,50,100,200),.mtry=2,.model="tree")
fitControl = trainControl(method="repeatedcv",number=10,repeats=10,returnResamp="all")
labels = as.factor(train$Classe)
model = train(x=features,y=labels,trControl=fitControl)
#
test_labels = as.factor(test$Classe)
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
confusionMatrix(data = predictions, test_labels)
table(data$Classe)
data = read.csv("../../data/tre_sagres_unificado.csv",header=T, encoding = "UTF-8")
table(data$Classe)
train_idx = createDataPartition(y=data$Classe, p=.75, list=FALSE)
createDataPartition
source("imports.R")
relabel_ano <- function(x){
ifelse(x >= 2009 && x <2013, 2009, 2013)
}
# Carregar conjunto de dados
## tre_sagres_jul jestores jugados
tre_sagres_jul <- read.csv('../../data/TRE_Sagres_Resp_Eleito.csv', encoding = "UTF-8")
## tre_sagres_n_jul jestores Não jugados
tre_sagres_n_jul <- read.csv('../../data/TRE_Sagres_Eleit_Idon.csv', encoding = "UTF-8")
## dados referentes a unidade gestora
ugestora <- read.csv('../../data/codigo_ugestora.csv', encoding = "UTF-8")
## contratos realizados pelas unidades gestoras
contrato <- read.csv('../../data/contratos.csv', encoding = "UTF-8")
## Conjundo de aditivos solicitados pelas unidades gestoras
aditivos = read.csv("../../data/aditivos.csv", encoding = "UTF-8")
## Sumário eleitoral das unidades gestoras
quantidadeEleitores = read.csv("../../data/quantidadeEleitores.csv", encoding = "UTF-8")
# Adiciona coluna Classe e valor de "Jugados" para gestores julgados
tre_sagres_jul$Classe <- "Julgado"
# Adiciona coluna Classe e valor de "Não julgados" para gestores Não julgados
tre_sagres_n_jul$Classe <- "Não julgado"
# Revolve colunas não necessárias
tre_sagres_jul <- select(tre_sagres_jul, -DECISÃO, -RES..DECISÃO.PODER.LEGISLATIVO, -ITEM, -PROCESSO, -SUBCATEGORIA, -RESPONSÁVEL, -CPF)
# Junta conjunto de dados dos gestores julgados e dos Não julgados
tre_sagres <- rbind(tre_sagres_jul, tre_sagres_n_jul)
# seleciona conjunto de contrados realizados após o ano de 2008 com licitações do tipo "Dispensa de valor" ou "Dispensa por outro motivo"
licitacoes <- subset(contrato, tp_Licitacao %in% c(6, 7) & dt_Ano > 2008)
# Aplica a função "relabel_ano" as licitações selecionadas
licitacoes$dt_Ano <- with(licitacoes, unlist(lapply(dt_Ano, relabel_ano)))
# Agrupa as dispensas de cada gestao agrupadas pelo ano
nu_Dispensas <- aggregate(tp_Licitacao ~ cd_UGestora + dt_Ano, licitacoes, length)
# Modifica o nome da coluna "tp_Licitacao" no conjunto "nu_Dispensas" para "nu_Dispensas"
colnames(nu_Dispensas)[3] <- "nu_Dispensas"
# Merge dos conjuntos "tre_sagres" e "nu_Dispensas". Merge feito pelo ano e unidade gestora
tre_sagres <- merge(tre_sagres, nu_Dispensas, all.x = T, by.x=c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"))
# Atribui 0 para "N/A"
tre_sagres$nu_Dispensas <- with(tre_sagres, ifelse(is.na(nu_Dispensas),0,nu_Dispensas))
# Aplica a função "relabel_ano" ao conjunto "Aditivos"
aditivos$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
# Agrupa os aditivos de cada gestao pelo ano
aditivos <- aggregate(nu_Aditivo ~ cd_UGestora + dt_Ano, aditivos, length)
# Convite de Licitações
## Seleciona todos os contratos do tipo convite
conviteLicitacaoPorGestao <- filter(contrato, tp_Licitacao == 3)
# Aplica a função "relabel_ano" ao conjunto de licitações do tipo "Convite"
conviteLicitacaoPorGestao$dt_Ano <- with(conviteLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
# Agrupa os convites de licitações de cada gestao pelo ano
conviteLicitacaoPorGestao <- aggregate(nu_Contrato ~ cd_UGestora + dt_Ano, conviteLicitacaoPorGestao, length)
# Merge dos conjuntos "aditivos" e "conviteLicitacaoPorGestao". Merge feito pelo ano e unidade gestora
set_features <- merge(aditivos, conviteLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
# Quantidade de Eleitores por Municipio e Distancia da capital
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade2009, Quantidade2013, DistanciaParaCapital)
# Média de Eleitores entre os anos
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(Media = (Quantidade2009 + Quantidade2013)/2)
# Merge dos conjuntos "tre_sagres" e "set_features". Merge feito pelo ano e unidade gestora
tre_sagres <- merge(tre_sagres, set_features, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
# Merge dos conjuntos "tre_sagres" e "quantidadeEleitores". Merge feito pelo ano e unidade gestora
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangencia"), all.x = T)
# Adiciona 0 nos "N/A"
tre_sagres[is.na(tre_sagres)] <- 0
# Elimina os repitidos
tre_sagres <- unique(tre_sagres)
relabel_ano <- function(x){
ifelse(x >= 2009 && x <2013, 2009, 2013)
}
# Carregar conjunto de dados
## tre_sagres_jul jestores jugados
tre_sagres_jul <- read.csv('../../data/TRE_Sagres_Resp_Eleito.csv', encoding = "UTF-8")
## tre_sagres_n_jul jestores Não jugados
tre_sagres_n_jul <- read.csv('../../data/TRE_Sagres_Eleit_Idon.csv', encoding = "UTF-8")
## dados referentes a unidade gestora
ugestora <- read.csv('../../data/codigo_ugestora.csv', encoding = "UTF-8")
## contratos realizados pelas unidades gestoras
contrato <- read.csv('../../data/contratos.csv', encoding = "UTF-8")
## Conjundo de aditivos solicitados pelas unidades gestoras
aditivos = read.csv("../../data/aditivos.csv", encoding = "UTF-8")
## Sumário eleitoral das unidades gestoras
quantidadeEleitores = read.csv("../../data/quantidadeEleitores.csv", encoding = "UTF-8")
# Adiciona coluna Classe e valor de "Jugados" para gestores julgados
tre_sagres_jul$Classe <- "Julgado"
# Adiciona coluna Classe e valor de "Não julgados" para gestores Não julgados
tre_sagres_n_jul$Classe <- "Não julgado"
# Revolve colunas não necessárias
tre_sagres_jul <- select(tre_sagres_jul, -DECISÃO, -RES..DECISÃO.PODER.LEGISLATIVO, -ITEM, -PROCESSO, -SUBCATEGORIA, -RESPONSÁVEL, -CPF)
# Junta conjunto de dados dos gestores julgados e dos Não julgados
tre_sagres <- rbind(tre_sagres_jul, tre_sagres_n_jul)
# seleciona conjunto de contrados realizados após o ano de 2008 com licitações do tipo "Dispensa de valor" ou "Dispensa por outro motivo"
licitacoes <- subset(contrato, tp_Licitacao %in% c(6, 7) & dt_Ano > 2008)
# Aplica a função "relabel_ano" as licitações selecionadas
licitacoes$dt_Ano <- with(licitacoes, unlist(lapply(dt_Ano, relabel_ano)))
# Agrupa as dispensas de cada gestao agrupadas pelo ano
nu_Dispensas <- aggregate(tp_Licitacao ~ cd_UGestora + dt_Ano, licitacoes, length)
# Modifica o nome da coluna "tp_Licitacao" no conjunto "nu_Dispensas" para "nu_Dispensas"
colnames(nu_Dispensas)[3] <- "nu_Dispensas"
# Merge dos conjuntos "tre_sagres" e "nu_Dispensas". Merge feito pelo ano e unidade gestora
tre_sagres <- merge(tre_sagres, nu_Dispensas, all.x = T, by.x=c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"))
# Atribui 0 para "N/A"
tre_sagres$nu_Dispensas <- with(tre_sagres, ifelse(is.na(nu_Dispensas),0,nu_Dispensas))
# Aplica a função "relabel_ano" ao conjunto "Aditivos"
aditivos$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
# Agrupa os aditivos de cada gestao pelo ano
aditivos <- aggregate(nu_Aditivo ~ cd_UGestora + dt_Ano, aditivos, length)
# Convite de Licitações
## Seleciona todos os contratos do tipo convite
conviteLicitacaoPorGestao <- filter(contrato, tp_Licitacao == 3)
# Aplica a função "relabel_ano" ao conjunto de licitações do tipo "Convite"
conviteLicitacaoPorGestao$dt_Ano <- with(conviteLicitacaoPorGestao, unlist(lapply(dt_Ano, relabel_ano)))
# Agrupa os convites de licitações de cada gestao pelo ano
conviteLicitacaoPorGestao <- aggregate(nu_Contrato ~ cd_UGestora + dt_Ano, conviteLicitacaoPorGestao, length)
# Merge dos conjuntos "aditivos" e "conviteLicitacaoPorGestao". Merge feito pelo ano e unidade gestora
set_features <- merge(aditivos, conviteLicitacaoPorGestao, by.x = c("cd_UGestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
# Quantidade de Eleitores por Municipio e Distancia da capital
quantidadeEleitores = select(quantidadeEleitores, Abrangencia, Quantidade2009, Quantidade2013, DistanciaParaCapital)
# Média de Eleitores entre os anos
quantidadeEleitores <- group_by(quantidadeEleitores, Abrangencia) %>% mutate(Media = (Quantidade2009 + Quantidade2013)/2)
# Merge dos conjuntos "tre_sagres" e "set_features". Merge feito pelo ano e unidade gestora
tre_sagres <- merge(tre_sagres, set_features, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
# Merge dos conjuntos "tre_sagres" e "quantidadeEleitores". Merge feito pelo ano e unidade gestora
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangencia"), all.x = T)
# Adiciona 0 nos "N/A"
tre_sagres[is.na(tre_sagres)] <- 0
# Elimina os repitidos
tre_sagres <- unique(tre_sagres)
source("imports.R")
library(dplyr)
library(caret)
