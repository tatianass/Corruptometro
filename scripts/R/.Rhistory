?rnorm
a=rnorm(100)
a
´çp
plot(a)
plot(a,1)
plot(a,c(1))
dnorm(a)
dnorm(1)
mean(a)
plot(a, dnorm(a))
dnorm(a)
sum(dnorm(a))
x <- seq(-4, 4, length=100)
x
plot(x)
dnomr(x)
dnorm(x)
sum(dnorm(x))
plot(x,dnorm(x)
)
mean(x)
sd(x)
dnorm(x, mean = mean(x), sd = sd(x))
plot(x,dnorm(x, mean = mean(x), sd = sd(x)))
x
clear
x
density(x)
plot(x, density(x))
density(x)
dx = density(x)
dx
dx[[1]]
dx[[2]]
setwd("~/GitHub/Corruptometro/scripts/R")
source("imports.R")
# Funcao para modificar o ano.
# Gestoes entre 2009 e 2012 tem o ano modificado para 2009
# Gestoes entre 2013 e 2016 tem o ano modificado para 2013
relabel_ano <- function(x){
ifelse(x >= 2009 && x <2013, 2009, 2013)
}
# Carregar conjunto de dados
tre_sagres <- read.csv("../../data/TRE_Sagres_Resp_Eleito_Final.csv",header=T, encoding = "UTF-8")
ugestora <- read.csv('../../data/codigo_ugestora.csv', encoding = "UTF-8")
quantidadeEleitores <- read.csv("../../data/quantidadeEleitores.csv", encoding = "UTF-8")
candidadosEleicao2016 <- read.csv("../../data/Candidatos_eleicao_2016.csv", encoding = "UTF-8")
candidadosEleicao2016$Candidato2016 <- TRUE
aditivos <- read.csv("../../data/aditivos.csv", encoding = "UTF-8")
aditivos$dt_Ano <- with(aditivos, unlist(lapply(dt_Ano, relabel_ano)))
contrato <- read.csv('../../data/contratos.csv', encoding = "UTF-8")
contrato <- subset(contrato, dt_Ano > 2008)
contrato$dt_Ano <- with(contrato, unlist(lapply(dt_Ano, relabel_ano)))
# Adiciona coluna com os candidatos a eleição em 2016
tre_sagres <- merge(tre_sagres, candidadosEleicao2016, by.x = c("de_Ugestora","Eleito"), by.y = c("de_Ugestora","ELEITO"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- FALSE
# Adiciona Quantidade de Eleitores por Municipio e Distancia da capital
quantidadeEleitores <- select(quantidadeEleitores, Abrangencia, DistanciaParaCapital, Media_Eleitores = (Quantidade2009 + Quantidade2013)/2) %>% mutate(Media_Eleitores = 1000*Media_Eleitores)
tre_sagres <- merge(tre_sagres, quantidadeEleitores, by.x = c("de_Ugestora"), by.y = c("Abrangencia"), all.x = T)
# Conta o numero de contratos da prefeitura
nu_Contratos <- aggregate(nu_Contrato ~ cd_UGestora + dt_Ano, contrato, length) %>% rename(nu_Contratos = nu_Contrato)
tre_sagres <- merge(tre_sagres, nu_Contratos, all.x = T, by.x=c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"))
# Adiciona a coluna "nu_Dispesas" a base
# seleciona conjunto de contrados com licitacoes do modelo "Dispensa de valor" ou "Dispensa por outro motivo"
nu_Dispensas <- subset(contrato, tp_Licitacao %in% c(6, 7)) %>%
group_by(cd_UGestora, dt_Ano) %>% summarise(nu_Dispensas = length(tp_Licitacao))
tre_sagres <- merge(tre_sagres, nu_Dispensas, all.x = T, by.x=c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"))
# Adiciona os atributos de aditivos
aditivo_De_Prazo <- filter(aditivos, vl_Aditivo == "0,0000") %>%
group_by(cd_UGestora, dt_Ano) %>% mutate(nu_Aditivo_Prazo = length(nu_Aditivo))
aditivo_De_Prazo <- select(aditivo_De_Prazo, cd_UGestora, dt_Ano ,nu_Aditivo_Prazo)
aditivo_De_Devolucao = filter(aditivos, regexpr('-', vl_Aditivo) > 0) %>%
group_by(cd_UGestora, dt_Ano) %>% mutate(nu_Aditivo_Devolucao = length(nu_Aditivo))
aditivo_De_Devolucao <- select(aditivo_De_Devolucao, cd_UGestora, dt_Ano, nu_Aditivo_Devolucao)
aditivo_De_Valor <- filter(aditivos, regexpr('-', vl_Aditivo) < 0) %>%
group_by(cd_UGestora, dt_Ano) %>% mutate(nu_Aditivo_Valor = length(nu_Aditivo))
aditivo_De_Valor <- select(aditivo_De_Valor, cd_UGestora, dt_Ano, nu_Aditivo_Valor)
nu_Aditivos_Totais <- merge(aditivo_De_Prazo, aditivo_De_Devolucao, by = c("cd_UGestora", "dt_Ano"), all.x = T)
nu_Aditivos_Totais <- merge(nu_Aditivos_Totais, aditivo_De_Valor, by = c("cd_UGestora", "dt_Ano"), all.x = T)
nu_Aditivos_Totais[is.na(nu_Aditivos_Totais)] <- 0
nu_Aditivos_Totais$nu_Aditivos_Totais <- with(nu_Aditivos_Totais, nu_Aditivo_Prazo + nu_Aditivo_Devolucao + nu_Aditivo_Valor)
nu_Aditivos_Totais <- unique(nu_Aditivos_Totais)
tre_sagres <- merge(tre_sagres, nu_Aditivos_Totais, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
# Adiciona convite de Licitacoes
## Seleciona todos os contratos do tipo convite
conviteLicitacaoPorGestao <- filter(contrato, tp_Licitacao == 3) %>%
group_by(cd_UGestora, dt_Ano) %>% summarise(nu_Convites = length(tp_Licitacao))
tre_sagres <- merge(tre_sagres, conviteLicitacaoPorGestao, by.x = c("cd_Ugestora","dt_Ano"), by.y = c("cd_UGestora","dt_Ano"), all.x = T)
tre_sagres[is.na(tre_sagres)] <- 0
# Adiciona proporcao de cada atributo pelo total de contratos
tre_sagres <- tre_sagres %>%
group_by(cd_Ugestora, dt_Ano) %>%
mutate_each(funs(Prop_Contratos = ./nu_Contratos), nu_Dispensas:nu_Convites)
# Adiciona proporcao de cada atributo pela media de eleitores
tre_sagres <- tre_sagres %>%
group_by(cd_Ugestora, dt_Ano) %>%
mutate_each(funs(Prop_Eleitores = ./Media_Eleitores), nu_Contratos:nu_Convites)
write.table(tre_sagres, "../../data/tre_sagres_unificado.csv", quote = F, row.names = F, sep=",", fileEncoding = "UTF-8")
table(tre_sagres$classe)
# Partição de teste com os candidatos reeleitos
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
test = tre_sagres[test_idx,]
train = tre_sagres[-test_idx,]
# Proporção dos conjuntos de treino e teste
prop.table(table(train$classe))
prop.table(table(test$classe))
#Treino do modelo
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Contratos + nu_Convites_Prop_Contratos, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
gain.ratio(classe ~ ., features)
features <- select(tre_sagres, classe, starts_with("nu_"))
information.gain(classe ~ ., features)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Contratos + nu_Convites_Prop_Contratos + nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais + nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
gain.ratio(classe ~ ., features)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais + nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores + nu_Convites_Prop_Contratos + nu_Aditivo_Valor_Prop_Contratos, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais + nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores + nu_Convites_Prop_Contratos + nu_Aditivo_Valor_Prop_Contratos, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
tre_sagres <- read.csv('../../data/tre_sagres_unificado.csv', encoding = "UTF-8")
# Excutar script data.R
source("imports.R")
#source("data.R")
tre_sagres <- read.csv('../../data/tre_sagres_unificado.csv', encoding = "UTF-8")
# Apresentar os possíveis níveis de Classe
table(tre_sagres$classe)
# Partição de teste com os candidatos reeleitos
test_idx = which(tre_sagres$Candidato2016)
# Conjunto de treino e teste
test = tre_sagres[test_idx,]
train = tre_sagres[-test_idx,]
# Proporção dos conjuntos de treino e teste
prop.table(table(train$classe))
prop.table(table(test$classe))
#Treino do modelo
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais + nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores + nu_Convites_Prop_Contratos + nu_Aditivo_Valor_Prop_Contratos, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais + nu_Convites_Prop_Contratos + nu_Aditivo_Valor_Prop_Contratos, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais + nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores + nu_Convites_Prop_Contratos + nu_Aditivo_Valor_Prop_Contratos, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Convites_Prop_Contratos + nu_Aditivo_Valor_Prop_Contratos, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ nu_Aditivo_Valor_Prop_Eleitores + nu_Aditivos_Totais_Prop_Eleitores, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
model = train(form = classe ~ starts_with("nu_"), data = train, trControl=fitControl, method="rf")
starts_with("nu_")
starts_with(train,"nu_")
?starts_with
train.features = select(train, class, starts_with("nu_"))
train.features = select(train, starts_with("nu_"))
train.features = select(train, classe, starts_with("nu_"))
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
train.features = select(train, classe, starts_with("nu_"))
model = train(form = classe ~ ., data = train.features, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
wilcox.test(irregulares$nu_Dispensas, nao_irregulares$nu_Dispensas, paired = F)
wilcox.test(irregulares$nu_Aditivo_Devolucao, nao_irregulares$nu_Aditivo_Devolucao, paired = F)
wilcox.test(irregulares$nu_Aditivo_Prazo, nao_irregulares$nu_Aditivo_Prazo, paired = F)
wilcox.test(irregulares$nu_Aditivo_Valor, nao_irregulares$nu_Aditivo_Valor, paired = F)
wilcox.test(irregulares$nu_Aditivos_Totais, nao_irregulares$nu_Aditivos_Totais, paired = F)
wilcox.test(irregulares$nu_Convites, nao_irregulares$nu_Convites, paired = F)
source("imports.R")
tre_sagres <- read.csv("../../data/tre_sagres_unificado.csv", encoding = "UTF-8")
features <- select(tre_sagres, classe, starts_with("nu_"))
information.gain(classe ~ ., features)
gain.ratio(classe ~ ., features)
irregulares <- subset(features, classe == 'IRREGULAR')
nao_irregulares <- subset(features, classe == 'NAO IRREGULAR')
wilcox.test(irregulares$nu_Dispensas, nao_irregulares$nu_Dispensas, paired = F)
wilcox.test(irregulares$nu_Aditivo_Devolucao, nao_irregulares$nu_Aditivo_Devolucao, paired = F)
wilcox.test(irregulares$nu_Aditivo_Prazo, nao_irregulares$nu_Aditivo_Prazo, paired = F)
wilcox.test(irregulares$nu_Aditivo_Valor, nao_irregulares$nu_Aditivo_Valor, paired = F)
wilcox.test(irregulares$nu_Aditivos_Totais, nao_irregulares$nu_Aditivos_Totais, paired = F)
wilcox.test(irregulares$nu_Convites, nao_irregulares$nu_Convites, paired = F)
wilcox.test(irregulares$nu_Dispensas_Prop_Contratos, nao_irregulares$nu_Dispensas_Prop_Contratos, paired = F)
wilcox.test(irregulares$nu_Aditivo_Devolucao_Prop_Contratos, nao_irregulares$nu_Aditivo_Devolucao_Prop_Contratos, paired = F)
wilcox.test(irregulares$nu_Aditivo_Prazo_Prop_Contratos, nao_irregulares$nu_Aditivo_Prazo_Prop_Contratos, paired = F)
wilcox.test(irregulares$nu_Aditivo_Valor_Prop_Contratos, nao_irregulares$nu_Aditivo_Valor_Prop_Contratos, paired = F)
wilcox.test(irregulares$nu_Aditivos_Totais_Prop_Contratos, nao_irregulares$nu_Aditivos_Totais_Prop_Contratos, paired = F)
wilcox.test(irregulares$nu_Convites_Prop_Contratos, nao_irregulares$nu_Convites_Prop_Contratos, paired = F)
wilcox.test(irregulares$nu_Dispensas_Prop_Eleitores, nao_irregulares$nu_Dispensas_Prop_Eleitores, paired = F)
wilcox.test(irregulares$nu_Aditivo_Devolucao_Prop_Eleitores, nao_irregulares$nu_Aditivo_Devolucao_Prop_Eleitores, paired = F)
wilcox.test(irregulares$nu_Aditivo_Prazo_Prop_Eleitores, nao_irregulares$nu_Aditivo_Prazo_Prop_Eleitores, paired = F)
wilcox.test(irregulares$nu_Aditivo_Valor_Prop_Eleitores, nao_irregulares$nu_Aditivo_Valor_Prop_Eleitores, paired = F)
wilcox.test(irregulares$nu_Aditivos_Totais_Prop_Eleitores, nao_irregulares$nu_Aditivos_Totais_Prop_Eleitores, paired = F)
wilcox.test(irregulares$nu_Convites_Prop_Eleitores, nao_irregulares$nu_Convites_Prop_Eleitores, paired = F)
train.features = select(train, classe, starts_with("nu_"), -starts_with("nu_Aditivo_Devolucao"))
View(train.features)
train.features = select(train, classe, starts_with("nu_"), -starts_with("nu_Aditivo_Devolucao"), -nu_Dispensas)
model = train(form = classe ~ ., data = train.features, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
fitControl = trainControl(method="repeatedcv", number=10, repeats=10, returnResamp="all")
#train.features = select(train, classe, starts_with("nu_"), -starts_with("nu_Aditivo_Devolucao"), -nu_Dispensas)
model = train(form = classe ~ nu_Aditivo_Valor + nu_Aditivos_Totais, data = train, trControl=fitControl, method="rf")
predictions = predict(model,newdata=test)
prob = predict(model,newdata=test,type = "prob")
caret::confusionMatrix(predictions, test$classe)
